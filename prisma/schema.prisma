// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String    @unique
  email     String    @unique
  fullName  String
  avatarUrl String
  address   String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Cart      Cart[]
  Order     Order[]
  Wishlist  Wishlist?

  @@map("users")
}

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  images       String[]
  category     Category
  size         String[]       @default([])
  stock        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CartItems    CartItem[]
  OrderItem    OrderItem[]
  WishlistItem WishlistItem[]

  @@map("products")
}

model Cart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String     @db.ObjectId
  items  CartItem[]
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  size      String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart    @relation(fields: [cartId], references: [id])

  @@unique([cartId, productId])
  @@map("cartItems")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  items      OrderItem[]
  totalPrice Float
  location   String
  status     Status      @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  size      String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("orderItems")
}

model Wishlist {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  userId   String         @unique @db.ObjectId
  products WishlistItem[]
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@map("wishlistItems")
}

enum Category {
  CLOTHING
  ACCESSORIES
}

enum Status {
  PENDING
  COMPLETED
  CANCELED
}
